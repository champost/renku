name: Deploy and Test PR
on:
  pull_request:
    types:
    - opened
    - synchronize
    - reopened
    - closed

jobs:
  cleanup-previous-runs:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  test-docs:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install graphviz
        pip install --upgrade pip pipenv
        pipenv install --deploy --dev --system
    - name: test the docs build
      env:
        SIDEBAR: 1
      run: |
        cd docs
        sphinx-build -nNW -b spelling -d _build/doctrees . _build/spelling
        sphinx-build -qnNW . _build/html
    - name: Upload docs
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: docs
        path: docs/_build/html/
  check-deploy:
    runs-on: ubuntu-20.04
    outputs:
      pr-contains-string: ${{ steps.deploy-comment.outputs.pr-contains-string }}
    steps:
      - uses: actions/checkout@v2
      - id: deploy-comment
        uses: ./actions/check-pr-description
        with:
          string: /deploy
          pr_ref: ${{ github.event.number }}
  deploy-pr:
    if: github.event.action != 'closed'
    needs: [cleanup-previous-runs, check-deploy]
    runs-on: ubuntu-latest
    environment:
      name: ci-renku-${{ github.event.number }}
    steps:
    - uses: actions/checkout@v2
    - name: renku build and deploy
      if: needs.check-deploy.outputs.pr-contains-string == 'true'
      uses: ./actions/deploy-renku
      env:
        DOCKER_PASSWORD: ${{ secrets.RENKU_DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.RENKU_DOCKER_USERNAME }}
        GITLAB_TOKEN: ${{ secrets.DEV_GITLAB_TOKEN }}
        KUBECONFIG: "${{ github.workspace }}/renkubot-kube.config"
        RANCHER_PROJECT_ID: ${{ secrets.CI_RANCHER_PROJECT }}
        RENKU_RELEASE: ci-renku-${{ github.event.number }}
        RENKU_VALUES_FILE: "${{ github.workspace }}/values.yaml"
        RENKU_VALUES: ${{ secrets.CI_RENKU_VALUES }}
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_DEV_KUBECONFIG }}
        RENKUBOT_RANCHER_BEARER_TOKEN: ${{ secrets.RENKUBOT_RANCHER_BEARER_TOKEN }}
        TEST_ARTIFACTS_PATH: "tests-artifacts-${{ github.sha }}"
        renku: "@${{ github.head_ref }}"
    - name: Check existing renkubot comment
      if: needs.check-deploy.outputs.pr-contains-string == 'true'
      uses: peter-evans/find-comment@v1
      id: findcomment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'RenkuBot'
    - name: Create comment pre deploy
      if: "steps.findcomment.outputs.comment-id == 0 && needs.check-deploy.outputs.pr-contains-string == 'true'"
      uses: peter-evans/create-or-update-comment@v1
      with:
        token: ${{ secrets.RENKUBOT_GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          You can access the deployment of this PR at https://ci-renku-${{ github.event.number }}.dev.renku.ch

  test-pr:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    needs: [check-deploy, deploy-pr]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y grep
        pip install yq
        sudo wget --quiet https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc
        sudo chmod 0755 /usr/local/bin/mc
    - name: Test the PR
      if: needs.check-deploy.outputs.pr-contains-string == 'true'
      env:
        KUBECONFIG: ${{ github.workspace }}/renkubot-kube.config
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_KUBECONFIG }}
        RENKU_RELEASE: ci-renku-${{ github.event.number }}
      run: |
        echo "$RENKUBOT_KUBECONFIG" > renkubot-kube.config
        helm test ${RENKU_RELEASE} --namespace ${RENKU_RELEASE} --timeout 40m --logs
    - name: Download artifact for packaging on failure
      env:
        RENKU_VALUES: ${{ secrets.CI_RENKU_VALUES }}
        TEST_ARTIFACTS_PATH: "tests-artifacts-${{ github.sha }}"
      if: failure()
      run: |
        printf "%s" "$RENKU_VALUES" > values.yaml
        export S3_HOST=$(yq '.tests.resultsS3.host' values.yaml -r)
        export S3_ACCESS=$(yq '.tests.resultsS3.accessKey' values.yaml -r)
        export S3_SECRET=$(yq '.tests.resultsS3.secretKey' values.yaml -r)
        export MC_HOST_bucket="https://${S3_ACCESS}:${S3_SECRET}@${S3_HOST}"
        mkdir test-artifacts/
        mc cp bucket/dev-acceptance-tests-results/$TEST_ARTIFACTS_PATH.tgz .
        mc rm bucket/dev-acceptance-tests-results/$TEST_ARTIFACTS_PATH.tgz
        tar -C test-artifacts/ -xzvf $TEST_ARTIFACTS_PATH.tgz
    - name: Upload screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v1
      with:
        name: acceptance-test-artifacts
        path: test-artifacts/
  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: renku teardown
      uses: ./actions/teardown-renku
      env:
        GITLAB_TOKEN: ${{ secrets.DEV_GITLAB_TOKEN }}
        KUBECONFIG: "${{ github.workspace }}/renkubot-kube.config"
        RENKU_RELEASE: ci-renku-${{ github.event.number }}
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_DEV_KUBECONFIG }}
